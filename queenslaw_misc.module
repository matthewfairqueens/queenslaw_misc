<?php

define('QUEENSLAW_MISC_LOCATION_BASE', 'https://www.queensu.ca/campusmap/main');
define('QUEENSLAW_MISC_LOCATION_PARAMETER', 'mapquery');

use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Field\FieldDefinitionInterface;
use Drupal\Core\Link;
use Drupal\Core\Url;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\taxonomy\Entity\Term;

/**
 * Implements hook_preprocess_field().
 *
 * Link the location field to the campus map.
 */
function queenslaw_misc_preprocess_field__node__field_location(&$variables) {
  if ((count($variables['items']) > 0) && (isset($variables['element']['#object']))) {
    $entity = $variables['element']['#object'];
    $values = $entity->get('field_location')->getValue();
    foreach ($values as $delta => $value) {
      if (isset($value['target_id'])) {
        if ($term = Term::load($value['target_id'])) {
          if ($term->hasField('field_campus_map_parameter')) {
            if ($campus_map_parameter = $term->get('field_campus_map_parameter')->getString()) {
              $text = $term->getName();
              $options = [
                'query' => [
                  QUEENSLAW_MISC_LOCATION_PARAMETER => $campus_map_parameter,
                ],
              ];
              $url = Url::fromUri(QUEENSLAW_MISC_LOCATION_BASE, $options);
              $link = Link::fromTextAndUrl($text, $url)->toRenderable();
              $variables['items'][$delta]['content'] = $link;
            }
          }
        }
      }
    }
  }
}

/**
 * Implements hook_preprocess_breadcrumb().
 *
 * Cache breadcrumbs per URL, otherwise all breadcrumbs for a given content type show the
 * same item, regardless of what the current item actually is.
 */
function queenslaw_misc_preprocess_breadcrumb(&$variables) {
  if (($node = \Drupal::routeMatch()->getParameter('node')) && (isset($variables['breadcrumb'])) && ($variables['breadcrumb'])) $variables['#cache']['contexts'][] = 'url';
}

/**
 * Set dynamic allowed values for the publication year field.
 *
 * @param \Drupal\field\Entity\FieldStorageConfig $definition
 *   The field definition.
 * @param \Drupal\Core\Entity\ContentEntityInterface|null $entity
 *   The entity being created if applicable.
 * @param bool $cacheable
 *   Boolean indicating if the results are cacheable.
 *
 * @return array
 *   An array of possible key and value options.
 *
 * @see options_allowed_values()
 */
function queenslaw_misc_publication_year_allowed_values(FieldStorageConfig $definition, ContentEntityInterface $entity = NULL, $cacheable) {
  $allowed_values = [];
  $final_year = date('Y') + 3;
  for ($i = 1950; $i <= $final_year; $i++) $allowed_values[$i] = $i;
  return $allowed_values;
}

/**
 * Sets the default value for the publication year field.
 *
 * @param \Drupal\Core\Entity\ContentEntityInterface $entity
 *   The entity being created.
 * @param \Drupal\Core\Field\FieldDefinitionInterface $definition
 *   The field definition.
 *
 * @return array
 *   An array of default value keys with each entry keyed with the “value” key.
 * 
 * @see \Drupal\Core\Field\FieldConfigBase::getDefaultValue()
 */
function queenslaw_misc_publication_year_default_value(ContentEntityInterface $entity, FieldDefinitionInterface $definition) {
  $default_value = [
    'value' => date('Y'),
  ];
  return $default_value;
}
